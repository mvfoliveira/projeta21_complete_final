{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nlet InscriptionComponent = class InscriptionComponent {\n  constructor(http) {\n    this.http = http;\n    this.utilisateur = {};\n    this.msg = '';\n  }\n  creerCompte() {\n    const url = 'http://localhost:8080/utilisateurs/ajouterutilisateur';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.post(url, this.utilisateur, {\n      headers,\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Compte crée avec succes:', response);\n      this.msg = 'Compte crée avec succes!';\n      this.effacerForm();\n    }, error => {\n      console.error('Erreur:', error);\n      this.msg = 'Erreur: ' + error.error;\n    });\n  }\n  effacerForm() {\n    this.utilisateur = {};\n    this.msg = 'Compte crée avec succes';\n  }\n  onSubmit() {\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (emailPattern.test(this.utilisateur.email)) {\n      this.utilisateur.profil = 'client';\n      this.utilisateur.statut = 'actif';\n      this.creerCompte();\n      console.log(this.utilisateur);\n    } else if (!emailPattern.test(this.utilisateur.email)) {\n      this.msg = \"L'email devra etre selon le format , email@email.com\";\n    }\n  }\n};\nInscriptionComponent = __decorate([Component({\n  selector: 'app-inscription',\n  templateUrl: './inscription.component.html',\n  styleUrls: ['./inscription.component.css']\n})], InscriptionComponent);\nexport { InscriptionComponent };","map":{"version":3,"names":["Component","HttpHeaders","InscriptionComponent","constructor","http","utilisateur","msg","creerCompte","url","headers","post","responseType","subscribe","response","console","log","effacerForm","error","onSubmit","emailPattern","test","email","profil","statut","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\user\\Desktop\\AEC-Analyste Programmeur\\Session 5\\ProjetSession5\\FINAL\\livro_frontend\\src\\app\\inscription\\inscription.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-inscription',\n  templateUrl: './inscription.component.html',\n  styleUrls: ['./inscription.component.css']\n})\nexport class InscriptionComponent {\n  utilisateur: any = {};\n  msg: string = '';\n\n  constructor(private http: HttpClient) {\n  }\n\n  creerCompte() {\n    const url = 'http://localhost:8080/utilisateurs/ajouterutilisateur';\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    this.http.post(url, this.utilisateur, { headers, responseType: 'text' }).subscribe(\n      (response) => {\n        console.log('Compte crée avec succes:', response);\n        this.msg = 'Compte crée avec succes!';\n        this.effacerForm();\n      },\n      (error: HttpErrorResponse) => {\n        console.error('Erreur:', error);\n        this.msg = 'Erreur: ' + error.error;\n      }\n    );\n  }\n  effacerForm() {\n    this.utilisateur = {};\n    this.msg = 'Compte crée avec succes';\n  }\n  onSubmit() {\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n\n    if (emailPattern.test(this.utilisateur.email)) {\n      this.utilisateur.profil = 'client';\n      this.utilisateur.statut = 'actif';\n      this.creerCompte();\n      console.log(this.utilisateur);\n    }\n    else if (!emailPattern.test(this.utilisateur.email)) {\n      this.msg = \"L'email devra etre selon le format , email@email.com\";\n    }\n\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAqBC,WAAW,QAA2B,sBAAsB;AAOjF,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAI/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,WAAW,GAAQ,EAAE;IACrB,KAAAC,GAAG,GAAW,EAAE;EAGhB;EAEAC,WAAWA,CAAA;IACT,MAAMC,GAAG,GAAG,uDAAuD;IACnE,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,IAAI,CAACG,IAAI,CAACM,IAAI,CAACF,GAAG,EAAE,IAAI,CAACH,WAAW,EAAE;MAAEI,OAAO;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAC/EC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;MACjD,IAAI,CAACP,GAAG,GAAG,0BAA0B;MACrC,IAAI,CAACU,WAAW,EAAE;IACpB,CAAC,EACAC,KAAwB,IAAI;MAC3BH,OAAO,CAACG,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,IAAI,CAACX,GAAG,GAAG,UAAU,GAAGW,KAAK,CAACA,KAAK;IACrC,CAAC,CACF;EACH;EACAD,WAAWA,CAAA;IACT,IAAI,CAACX,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,GAAG,GAAG,yBAAyB;EACtC;EACAY,QAAQA,CAAA;IACN,MAAMC,YAAY,GAAG,kDAAkD;IAGvE,IAAIA,YAAY,CAACC,IAAI,CAAC,IAAI,CAACf,WAAW,CAACgB,KAAK,CAAC,EAAE;MAC7C,IAAI,CAAChB,WAAW,CAACiB,MAAM,GAAG,QAAQ;MAClC,IAAI,CAACjB,WAAW,CAACkB,MAAM,GAAG,OAAO;MACjC,IAAI,CAAChB,WAAW,EAAE;MAClBO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,WAAW,CAAC;KAC9B,MACI,IAAI,CAACc,YAAY,CAACC,IAAI,CAAC,IAAI,CAACf,WAAW,CAACgB,KAAK,CAAC,EAAE;MACnD,IAAI,CAACf,GAAG,GAAG,sDAAsD;;EAGrE;CACD;AA1CYJ,oBAAoB,GAAAsB,UAAA,EALhCxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWzB,oBAAoB,CA0ChC;SA1CYA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}